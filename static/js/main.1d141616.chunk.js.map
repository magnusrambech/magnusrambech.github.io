{"version":3,"sources":["components/landingpage/landingpage.js","components/projects/projects.js","components/about/about.js","components/contact/contact.js","components/navbar/navbar.js","App.js","serviceWorker.js","index.js"],"names":["LandingPage","state","react_default","a","createElement","id","className","Component","Projects","About","Contact","NavBar","componentDidMount","dist_default","selector","this","props","focus","App","active","window","addEventListener","_this","handleScroll","findMaxScroll","Math","max","document","body","scrollHeight","offsetHeight","documentElement","clientHeight","event","scrollTop","srcElement","min","scrollY","console","log","setState","Fragment","navbar_navbar","landingpage_landingpage","about_about","projects_projects","contact_contact","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0VAgBeA,oNAbbC,MAAQ,2EAGN,OACEC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,cAAcC,UAAU,+BAC9BJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,sBAAd,+BAPgBC,cCaXC,oNAZbP,MAAQ,2EAEN,OACEC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WAAWC,UAAU,4BAC3BJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,0BAAd,qBANaC,cCaRE,oNAZbR,MAAQ,2EAEN,OACEC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QAAQC,UAAU,yBACxBJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,uBAAd,kBANUC,cCaLG,oNAZbT,MAAQ,2EAEN,OACEC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UAAUC,UAAU,2BAC1BJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,yBAAd,oBANYC,4CCuDPI,6MArDbV,MAAQ,KACRW,kBAAoB,qFAElB,OACEV,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACfJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAgBW,SAAS,gBACvBZ,EAAAC,EAAAC,cAAA,MACEE,UACE,uBACsB,gBAArBS,KAAKC,MAAMC,MAA0B,UAAY,KAHtD,iBASFf,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAgBW,SAAS,UACvBZ,EAAAC,EAAAC,cAAA,MACEE,UACE,uBACsB,UAArBS,KAAKC,MAAMC,MAAoB,UAAY,KAHhD,UASFf,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAgBW,SAAS,aACvBZ,EAAAC,EAAAC,cAAA,MACEE,UACE,uBACsB,aAArBS,KAAKC,MAAMC,MAAuB,UAAY,KAHnD,aASFf,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAgBW,SAAS,YACvBZ,EAAAC,EAAAC,cAAA,MACEE,UACE,uBACsB,YAArBS,KAAKC,MAAMC,MAAsB,UAAY,KAHlD,qBAvCSV,aC0DNW,6MArDbjB,MAAQ,CAAEkB,OAAQ,MAElBP,kBAAoB,WAClBQ,OAAOC,iBAAiB,SAAUC,EAAKC,iBAEzCC,cAAgB,WAQd,OAPYC,KAAKC,IACfC,SAASC,KAAKC,aACdF,SAASC,KAAKE,aACdH,SAASI,gBAAgBC,aACzBL,SAASI,gBAAgBF,aACzBF,SAASI,gBAAgBD,iBAI7BP,aAAe,SAAAU,GACb,IAAIC,EAAYD,EAAME,WAAWP,KAAKM,UACpBT,KAAKW,IAAI,EAAGF,EAAY,EAAI,IAE1Cd,OAAOiB,QAAiC,GAAvBf,EAAKE,iBACxBc,QAAQC,IAAI,eACZjB,EAAKkB,SAAS,CAAErB,OAAQ,iBAExBC,OAAOiB,QAAiC,GAAvBf,EAAKE,iBACtBJ,OAAOiB,QAAiC,GAAvBf,EAAKE,iBAEtBc,QAAQC,IAAI,SACZjB,EAAKkB,SAAS,CAAErB,OAAQ,WAExBC,OAAOiB,QAAiC,GAAvBf,EAAKE,iBACtBJ,OAAOiB,QAAiC,GAAvBf,EAAKE,iBAEtBc,QAAQC,IAAI,YACZjB,EAAKkB,SAAS,CAAErB,OAAQ,eAExBmB,QAAQC,IAAI,WACZjB,EAAKkB,SAAS,CAAErB,OAAQ,sFAK1B,OACEjB,EAAAC,EAAAC,cAACF,EAAAC,EAAMsC,SAAP,KACEvC,EAAAC,EAAAC,cAACsC,EAAD,CAAQzB,MAAOF,KAAKd,MAAMkB,SAC1BjB,EAAAC,EAAAC,cAACuC,EAAD,MACAzC,EAAAC,EAAAC,cAACwC,EAAD,MACA1C,EAAAC,EAAAC,cAACyC,EAAD,MACA3C,EAAAC,EAAAC,cAAC0C,EAAD,cAhDUvC,aCKEwC,QACW,cAA7B3B,OAAO4B,SAASC,UAEe,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAAS1B,SAAS2B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1d141616.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./landingpage.css\";\r\nclass LandingPage extends Component {\r\n  state = {};\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"landingpage\" className=\"content content-landingpage\">\r\n        <div className=\"body-landingpage\">\r\n          <h1 className=\"header header-body\">Work In Progress..</h1>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LandingPage;\r\n","import React, { Component } from \"react\";\r\nimport \"./projects.css\";\r\nclass Projects extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div id=\"projects\" className=\"content content-projects\">\r\n        <div className=\"body-projects\">\r\n          <h1 className=\"header header-projects\">Projects</h1>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Projects;\r\n","import React, { Component } from \"react\";\r\nimport \"./about.css\";\r\nclass About extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div id=\"about\" className=\"content content-about\">\r\n        <div className=\"body-about\">\r\n          <h1 className=\"header header-about\">About</h1>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default About;\r\n","import React, { Component } from \"react\";\r\nimport \"./contact.css\";\r\nclass Contact extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div id=\"contact\" className=\"content content-contact\">\r\n        <div className=\"body-contact\">\r\n          <h1 className=\"header header-contact\">Contact</h1>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Contact;\r\n","import React, { Component } from \"react\";\r\nimport \"./navbar.css\";\r\nimport ScrollIntoView from \"react-scroll-into-view\";\r\nclass NavBar extends Component {\r\n  state = {};\r\n  componentDidMount = () => {};\r\n  render() {\r\n    return (\r\n      <div className=\"navbar\">\r\n        <div className=\"navbar-line\" />\r\n        <div className=\"navbar-item-box\">\r\n          <ScrollIntoView selector=\"#landingpage\">\r\n            <h3\r\n              className={\r\n                \"navbar-item item-1 \" +\r\n                (this.props.focus === \"landingpage\" ? \"focused\" : \"\")\r\n              }\r\n            >\r\n              Landing Page\r\n            </h3>\r\n          </ScrollIntoView>\r\n          <ScrollIntoView selector=\"#about\">\r\n            <h3\r\n              className={\r\n                \"navbar-item item-2 \" +\r\n                (this.props.focus === \"about\" ? \"focused\" : \"\")\r\n              }\r\n            >\r\n              About\r\n            </h3>\r\n          </ScrollIntoView>\r\n          <ScrollIntoView selector=\"#projects\">\r\n            <h3\r\n              className={\r\n                \"navbar-item item-3 \" +\r\n                (this.props.focus === \"projects\" ? \"focused\" : \"\")\r\n              }\r\n            >\r\n              Projects\r\n            </h3>\r\n          </ScrollIntoView>\r\n          <ScrollIntoView selector=\"#contact\">\r\n            <h3\r\n              className={\r\n                \"navbar-item item-4 \" +\r\n                (this.props.focus === \"contact\" ? \"focused\" : \"\")\r\n              }\r\n            >\r\n              Contact\r\n            </h3>\r\n          </ScrollIntoView>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\nimport LandingPage from \"./components/landingpage/landingpage\";\nimport Projects from \"./components/projects/projects\";\nimport About from \"./components/about/about\";\nimport Contact from \"./components/contact/contact\";\nimport \"./App.css\";\nimport NavBar from \"./components/navbar/navbar\";\nclass App extends Component {\n  state = { active: \"\" };\n\n  componentDidMount = () => {\n    window.addEventListener(\"scroll\", this.handleScroll);\n  };\n  findMaxScroll = () => {\n    var limit = Math.max(\n      document.body.scrollHeight,\n      document.body.offsetHeight,\n      document.documentElement.clientHeight,\n      document.documentElement.scrollHeight,\n      document.documentElement.offsetHeight\n    );\n    return limit;\n  };\n  handleScroll = event => {\n    let scrollTop = event.srcElement.body.scrollTop,\n      itemTranslate = Math.min(0, scrollTop / 3 - 60);\n\n    if (window.scrollY < this.findMaxScroll() * 0.2) {\n      console.log(\"landingpage\");\n      this.setState({ active: \"landingpage\" });\n    } else if (\n      window.scrollY > this.findMaxScroll() * 0.2 &&\n      window.scrollY < this.findMaxScroll() * 0.4\n    ) {\n      console.log(\"about\");\n      this.setState({ active: \"about\" });\n    } else if (\n      window.scrollY > this.findMaxScroll() * 0.4 &&\n      window.scrollY < this.findMaxScroll() * 0.6\n    ) {\n      console.log(\"projects\");\n      this.setState({ active: \"projects\" });\n    } else {\n      console.log(\"contact\");\n      this.setState({ active: \"contact\" });\n    }\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar focus={this.state.active} />\n        <LandingPage />\n        <About />\n        <Projects />\n        <Contact />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}